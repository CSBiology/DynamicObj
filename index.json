[{"uri":"https://csbiology.github.io/DynamicObj/reference/dynamicobj.html","title":"DynamicObj","content":"DynObj \nReflectionUtils \nDynamicObj"},{"uri":"https://csbiology.github.io/DynamicObj/reference/dynamicobj-dynobj.html","title":"DynObj","content":"DynObj \n \nDynObj.ofDict \nofDict \nDynObj.ofSeq \nofSeq \nDynObj.ofList \nofList \nDynObj.ofArray \nofArray \nDynObj.combine \ncombine \nDynObj.setValue \nsetValue \nDynObj.setValueOpt \nsetValueOpt \nDynObj.setValueOptBy \nsetValueOptBy \nDynObj.tryGetValue \ntryGetValue \nDynObj.remove \nremove"},{"uri":"https://csbiology.github.io/DynamicObj/reference/dynamicobj-dynobj.html#ofDict","title":"DynObj.ofDict","content":"DynObj.ofDict \nofDict \n\n New DynamicObj of Dictionary\n"},{"uri":"https://csbiology.github.io/DynamicObj/reference/dynamicobj-dynobj.html#ofSeq","title":"DynObj.ofSeq","content":"DynObj.ofSeq \nofSeq \n\n New DynamicObj of a sequence of key value\n"},{"uri":"https://csbiology.github.io/DynamicObj/reference/dynamicobj-dynobj.html#ofList","title":"DynObj.ofList","content":"DynObj.ofList \nofList \n\n New DynamicObj of a list of key value\n"},{"uri":"https://csbiology.github.io/DynamicObj/reference/dynamicobj-dynobj.html#ofArray","title":"DynObj.ofArray","content":"DynObj.ofArray \nofArray \n\n New DynamicObj of an array of key value\n"},{"uri":"https://csbiology.github.io/DynamicObj/reference/dynamicobj-dynobj.html#combine","title":"DynObj.combine","content":"DynObj.combine \ncombine \n\n Merges two DynamicObj (Warning: In case of duplicate property names the members of the second object override those of the first)\n"},{"uri":"https://csbiology.github.io/DynamicObj/reference/dynamicobj-dynobj.html#setValue","title":"DynObj.setValue","content":"DynObj.setValue \nsetValue \n"},{"uri":"https://csbiology.github.io/DynamicObj/reference/dynamicobj-dynobj.html#setValueOpt","title":"DynObj.setValueOpt","content":"DynObj.setValueOpt \nsetValueOpt \n"},{"uri":"https://csbiology.github.io/DynamicObj/reference/dynamicobj-dynobj.html#setValueOptBy","title":"DynObj.setValueOptBy","content":"DynObj.setValueOptBy \nsetValueOptBy \n"},{"uri":"https://csbiology.github.io/DynamicObj/reference/dynamicobj-dynobj.html#tryGetValue","title":"DynObj.tryGetValue","content":"DynObj.tryGetValue \ntryGetValue \n"},{"uri":"https://csbiology.github.io/DynamicObj/reference/dynamicobj-dynobj.html#remove","title":"DynObj.remove","content":"DynObj.remove \nremove \n"},{"uri":"https://csbiology.github.io/DynamicObj/reference/dynamicobj-reflectionutils.html","title":"ReflectionUtils","content":"ReflectionUtils \n \nReflectionUtils.getPublicProperties \ngetPublicProperties \nReflectionUtils.buildApply \nbuildApply \nReflectionUtils.optBuildApply \noptBuildApply \nReflectionUtils.optApply \noptApply \nReflectionUtils.tryGetPropertyName \ntryGetPropertyName \nReflectionUtils.tryGetPropertyInfo \ntryGetPropertyInfo \nReflectionUtils.trySetPropertyValue \ntrySetPropertyValue \nReflectionUtils.tryGetPropertyValue \ntryGetPropertyValue \nReflectionUtils.tryGetPropertyValueAs \ntryGetPropertyValueAs \nReflectionUtils.tryUpdatePropertyValueFromName \ntryUpdatePropertyValueFromName \nReflectionUtils.tryUpdatePropertyValue \ntryUpdatePropertyValue \nReflectionUtils.updatePropertyValueAndIgnore \nupdatePropertyValueAndIgnore \nReflectionUtils.removeProperty \nremoveProperty"},{"uri":"https://csbiology.github.io/DynamicObj/reference/dynamicobj-reflectionutils.html#getPublicProperties","title":"ReflectionUtils.getPublicProperties","content":"ReflectionUtils.getPublicProperties \ngetPublicProperties \n"},{"uri":"https://csbiology.github.io/DynamicObj/reference/dynamicobj-reflectionutils.html#buildApply","title":"ReflectionUtils.buildApply","content":"ReflectionUtils.buildApply \nbuildApply \n\n Creates an instance of the Object according to applyStyle and applies the function..\n"},{"uri":"https://csbiology.github.io/DynamicObj/reference/dynamicobj-reflectionutils.html#optBuildApply","title":"ReflectionUtils.optBuildApply","content":"ReflectionUtils.optBuildApply \noptBuildApply \n\n Applies \u0027applyStyle\u0027 to item option. If None it creates a new instance.\n"},{"uri":"https://csbiology.github.io/DynamicObj/reference/dynamicobj-reflectionutils.html#optApply","title":"ReflectionUtils.optApply","content":"ReflectionUtils.optApply \noptApply \n\n Applies Some \u0027applyStyle\u0027 to item. If None it returns \u0027item\u0027 unchanged.\n"},{"uri":"https://csbiology.github.io/DynamicObj/reference/dynamicobj-reflectionutils.html#tryGetPropertyName","title":"ReflectionUtils.tryGetPropertyName","content":"ReflectionUtils.tryGetPropertyName \ntryGetPropertyName \n\n Returns the proptery name from quotation expression\n"},{"uri":"https://csbiology.github.io/DynamicObj/reference/dynamicobj-reflectionutils.html#tryGetPropertyInfo","title":"ReflectionUtils.tryGetPropertyInfo","content":"ReflectionUtils.tryGetPropertyInfo \ntryGetPropertyInfo \n\n Try to get the PropertyInfo by name using reflection\n"},{"uri":"https://csbiology.github.io/DynamicObj/reference/dynamicobj-reflectionutils.html#trySetPropertyValue","title":"ReflectionUtils.trySetPropertyValue","content":"ReflectionUtils.trySetPropertyValue \ntrySetPropertyValue \n\n Sets property value using reflection\n"},{"uri":"https://csbiology.github.io/DynamicObj/reference/dynamicobj-reflectionutils.html#tryGetPropertyValue","title":"ReflectionUtils.tryGetPropertyValue","content":"ReflectionUtils.tryGetPropertyValue \ntryGetPropertyValue \n\n Gets property value as option using reflection\n"},{"uri":"https://csbiology.github.io/DynamicObj/reference/dynamicobj-reflectionutils.html#tryGetPropertyValueAs","title":"ReflectionUtils.tryGetPropertyValueAs","content":"ReflectionUtils.tryGetPropertyValueAs \ntryGetPropertyValueAs \n\n Gets property value as \u0027a option using reflection. Cast to \u0027a\n"},{"uri":"https://csbiology.github.io/DynamicObj/reference/dynamicobj-reflectionutils.html#tryUpdatePropertyValueFromName","title":"ReflectionUtils.tryUpdatePropertyValueFromName","content":"ReflectionUtils.tryUpdatePropertyValueFromName \ntryUpdatePropertyValueFromName \n\n Updates property value by given function\n"},{"uri":"https://csbiology.github.io/DynamicObj/reference/dynamicobj-reflectionutils.html#tryUpdatePropertyValue","title":"ReflectionUtils.tryUpdatePropertyValue","content":"ReflectionUtils.tryUpdatePropertyValue \ntryUpdatePropertyValue \n\n Updates property value by given function\n"},{"uri":"https://csbiology.github.io/DynamicObj/reference/dynamicobj-reflectionutils.html#updatePropertyValueAndIgnore","title":"ReflectionUtils.updatePropertyValueAndIgnore","content":"ReflectionUtils.updatePropertyValueAndIgnore \nupdatePropertyValueAndIgnore \n"},{"uri":"https://csbiology.github.io/DynamicObj/reference/dynamicobj-reflectionutils.html#removeProperty","title":"ReflectionUtils.removeProperty","content":"ReflectionUtils.removeProperty \nremoveProperty \n\n Removes property \n"},{"uri":"https://csbiology.github.io/DynamicObj/reference/dynamicobj-dynamicobj.html","title":"DynamicObj","content":"DynamicObj \n \nDynamicObj.( .ctor ) \n( .ctor ) \nDynamicObj.CopyDynamicProperties \nCopyDynamicProperties \nDynamicObj.CopyDynamicPropertiesTo \nCopyDynamicPropertiesTo \nDynamicObj.GetProperties \nGetProperties \nDynamicObj.Remove \nRemove \nDynamicObj.SetValue \nSetValue \nDynamicObj.TryGetTypedValue \nTryGetTypedValue \nDynamicObj.TryGetValue \nTryGetValue \nDynamicObj.GetValue \nGetValue \nDynamicObj.Remove \nRemove \nDynamicObj.( ? ) \n( ? ) \nDynamicObj.( ?\u003C- ) \n( ?\u003C- )"},{"uri":"https://csbiology.github.io/DynamicObj/reference/dynamicobj-dynamicobj.html#( .ctor )","title":"DynamicObj.( .ctor )","content":"DynamicObj.( .ctor ) \n( .ctor ) \n"},{"uri":"https://csbiology.github.io/DynamicObj/reference/dynamicobj-dynamicobj.html#CopyDynamicProperties","title":"DynamicObj.CopyDynamicProperties","content":"DynamicObj.CopyDynamicProperties \nCopyDynamicProperties \n\n Returns a new DynamicObj with only the dynamic properties of the original DynamicObj (sans instance properties).\n"},{"uri":"https://csbiology.github.io/DynamicObj/reference/dynamicobj-dynamicobj.html#CopyDynamicPropertiesTo","title":"DynamicObj.CopyDynamicPropertiesTo","content":"DynamicObj.CopyDynamicPropertiesTo \nCopyDynamicPropertiesTo \n\n Copies all dynamic members of the DynamicObj to the target DynamicObj.\n"},{"uri":"https://csbiology.github.io/DynamicObj/reference/dynamicobj-dynamicobj.html#GetProperties","title":"DynamicObj.GetProperties","content":"DynamicObj.GetProperties \nGetProperties \n\n Returns both instance and dynamic properties when passed true, only dynamic properties otherwise. \n Properties are returned as a key value pair of the member names and the boxed values\n"},{"uri":"https://csbiology.github.io/DynamicObj/reference/dynamicobj-dynamicobj.html#Remove","title":"DynamicObj.Remove","content":"DynamicObj.Remove \nRemove \n"},{"uri":"https://csbiology.github.io/DynamicObj/reference/dynamicobj-dynamicobj.html#SetValue","title":"DynamicObj.SetValue","content":"DynamicObj.SetValue \nSetValue \n\n Sets property value, creating a new property if none exists\n"},{"uri":"https://csbiology.github.io/DynamicObj/reference/dynamicobj-dynamicobj.html#TryGetTypedValue","title":"DynamicObj.TryGetTypedValue","content":"DynamicObj.TryGetTypedValue \nTryGetTypedValue \n\n Gets property value\n"},{"uri":"https://csbiology.github.io/DynamicObj/reference/dynamicobj-dynamicobj.html#TryGetValue","title":"DynamicObj.TryGetValue","content":"DynamicObj.TryGetValue \nTryGetValue \n\n Gets property value\n"},{"uri":"https://csbiology.github.io/DynamicObj/reference/dynamicobj-dynamicobj.html#GetValue","title":"DynamicObj.GetValue","content":"DynamicObj.GetValue \nGetValue \n"},{"uri":"https://csbiology.github.io/DynamicObj/reference/dynamicobj-dynamicobj.html#Remove","title":"DynamicObj.Remove","content":"DynamicObj.Remove \nRemove \n"},{"uri":"https://csbiology.github.io/DynamicObj/reference/dynamicobj-dynamicobj.html#( ? )","title":"DynamicObj.( ? )","content":"DynamicObj.( ? ) \n( ? ) \n\n Operator to access a dynamic member by name\n"},{"uri":"https://csbiology.github.io/DynamicObj/reference/dynamicobj-dynamicobj.html#( ?\u003C- )","title":"DynamicObj.( ?\u003C- )","content":"DynamicObj.( ?\u003C- ) \n( ?\u003C- ) \n\n Operator to set a dynamic member\n"},{"uri":"https://csbiology.github.io/DynamicObj/index.html","title":"DynamicObj\r\n","content":"(*** condition: prepare ***)\n#r \u0022../bin/DynamicObj/netstandard2.0/DynamicObj.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: DynamicObj, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n\n(**\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/CSBiology/DynamicObj/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n# DynamicObj\n\nF# library supporting Dynamic Objects including inheritance in functional style. It builds on \u00B4System.Dynamic\u00B4 but adds object inheritance.\n\nOne main use case of this library is the dynamic generation of JSON objects - especially nested objects with optional properties - aimed to be used from javascript wuith the init/style pattern:\n\nUse it for your custom types via inheritance:\n\n*)\n#r \u0022nuget: Newtonsoft.JSON, 12.0.3\u0022\nopen Newtonsoft.Json\nopen DynamicObj\n\ntype A() = \n    inherit DynamicObj()\n\n    static member init\n        (\n            ?SomeProp: int\n        ) =\n            A()\n            |\u003E A.style\n                (\n                    ?SomeProp  = SomeProp\n                )\n\n    static member style\n        (\n            ?SomeProp: int\n        ) =\n            fun (a:A) -\u003E\n\n                SomeProp |\u003E DynObj.setValueOpt a \u0022some_prop\u0022\n\n                a\n\n\nlet aSerialized =\n    A.init(42)\n    |\u003E JsonConvert.SerializeObject\n\n(*** condition: ipynb ***)\n#if IPYNB\naSerialized\n#endif // IPYNB\n\n(***include-value:aSerialized***)\n\ntype MyComplexJSONType() =\n    inherit DynamicObj()\n\n    static member init\n        (\n            ?PropA: int [],\n            ?PropB: A\n        ) =\n            MyComplexJSONType()\n            |\u003E MyComplexJSONType.style\n                (\n                    ?PropA  = PropA,\n                    ?PropB  = PropB\n                )\n\n    static member style\n        (\n            ?PropA: int [],\n            ?PropB: A\n        ) =\n            fun (t:MyComplexJSONType) -\u003E\n\n                PropA |\u003E DynObj.setValueOpt t \u0022prop_a\u0022\n                PropB |\u003E DynObj.setValueOpt t \u0022prop_b\u0022\n\n                t\n\nlet complexSerialized =\n    MyComplexJSONType.init(\n        PropA = [|42;1337|],\n        PropB = A.init(68) // nested dynamic objects\n    )\n    |\u003E JsonConvert.SerializeObject\n\n(*** condition: ipynb ***)\n#if IPYNB\ncomplexSerialized\n#endif // IPYNB\n\n(***include-value:complexSerialized***)"}]